// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/book.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/book.go -destination=internal/mocks/book_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/SimpleBookRental/backend/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBookRepository is a mock of BookRepository interface.
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
	isgomock struct{}
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository.
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance.
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookRepository) Create(book *domain.Book) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", book)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBookRepositoryMockRecorder) Create(book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookRepository)(nil).Create), book)
}

// DecrementAvailableCopies mocks base method.
func (m *MockBookRepository) DecrementAvailableCopies(id int64) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementAvailableCopies", id)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrementAvailableCopies indicates an expected call of DecrementAvailableCopies.
func (mr *MockBookRepositoryMockRecorder) DecrementAvailableCopies(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementAvailableCopies", reflect.TypeOf((*MockBookRepository)(nil).DecrementAvailableCopies), id)
}

// Delete mocks base method.
func (m *MockBookRepository) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookRepository)(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockBookRepository) GetByID(id int64) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBookRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookRepository)(nil).GetByID), id)
}

// GetByISBN mocks base method.
func (m *MockBookRepository) GetByISBN(isbn string) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByISBN", isbn)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByISBN indicates an expected call of GetByISBN.
func (mr *MockBookRepositoryMockRecorder) GetByISBN(isbn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByISBN", reflect.TypeOf((*MockBookRepository)(nil).GetByISBN), isbn)
}

// IncrementAvailableCopies mocks base method.
func (m *MockBookRepository) IncrementAvailableCopies(id int64) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementAvailableCopies", id)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementAvailableCopies indicates an expected call of IncrementAvailableCopies.
func (mr *MockBookRepositoryMockRecorder) IncrementAvailableCopies(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementAvailableCopies", reflect.TypeOf((*MockBookRepository)(nil).IncrementAvailableCopies), id)
}

// List mocks base method.
func (m *MockBookRepository) List(limit, offset int32) ([]*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, offset)
	ret0, _ := ret[0].([]*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBookRepositoryMockRecorder) List(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBookRepository)(nil).List), limit, offset)
}

// ListByCategory mocks base method.
func (m *MockBookRepository) ListByCategory(categoryID int64, limit, offset int32) ([]*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByCategory", categoryID, limit, offset)
	ret0, _ := ret[0].([]*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByCategory indicates an expected call of ListByCategory.
func (mr *MockBookRepositoryMockRecorder) ListByCategory(categoryID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByCategory", reflect.TypeOf((*MockBookRepository)(nil).ListByCategory), categoryID, limit, offset)
}

// Search mocks base method.
func (m *MockBookRepository) Search(params domain.BookSearchParams) ([]*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", params)
	ret0, _ := ret[0].([]*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockBookRepositoryMockRecorder) Search(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockBookRepository)(nil).Search), params)
}

// Update mocks base method.
func (m *MockBookRepository) Update(book *domain.Book) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", book)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBookRepositoryMockRecorder) Update(book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookRepository)(nil).Update), book)
}

// UpdateCopies mocks base method.
func (m *MockBookRepository) UpdateCopies(id int64, totalCopies, availableCopies int32) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCopies", id, totalCopies, availableCopies)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCopies indicates an expected call of UpdateCopies.
func (mr *MockBookRepositoryMockRecorder) UpdateCopies(id, totalCopies, availableCopies any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCopies", reflect.TypeOf((*MockBookRepository)(nil).UpdateCopies), id, totalCopies, availableCopies)
}

// MockBookService is a mock of BookService interface.
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
	isgomock struct{}
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService.
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance.
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookService) Create(book *domain.Book) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", book)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBookServiceMockRecorder) Create(book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookService)(nil).Create), book)
}

// Delete mocks base method.
func (m *MockBookService) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookServiceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookService)(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockBookService) GetByID(id int64) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBookServiceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookService)(nil).GetByID), id)
}

// GetByISBN mocks base method.
func (m *MockBookService) GetByISBN(isbn string) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByISBN", isbn)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByISBN indicates an expected call of GetByISBN.
func (mr *MockBookServiceMockRecorder) GetByISBN(isbn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByISBN", reflect.TypeOf((*MockBookService)(nil).GetByISBN), isbn)
}

// IsAvailable mocks base method.
func (m *MockBookService) IsAvailable(id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockBookServiceMockRecorder) IsAvailable(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockBookService)(nil).IsAvailable), id)
}

// List mocks base method.
func (m *MockBookService) List(limit, offset int32) ([]*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, offset)
	ret0, _ := ret[0].([]*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBookServiceMockRecorder) List(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBookService)(nil).List), limit, offset)
}

// ListByCategory mocks base method.
func (m *MockBookService) ListByCategory(categoryID int64, limit, offset int32) ([]*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByCategory", categoryID, limit, offset)
	ret0, _ := ret[0].([]*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByCategory indicates an expected call of ListByCategory.
func (mr *MockBookServiceMockRecorder) ListByCategory(categoryID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByCategory", reflect.TypeOf((*MockBookService)(nil).ListByCategory), categoryID, limit, offset)
}

// Search mocks base method.
func (m *MockBookService) Search(params domain.BookSearchParams) ([]*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", params)
	ret0, _ := ret[0].([]*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockBookServiceMockRecorder) Search(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockBookService)(nil).Search), params)
}

// Update mocks base method.
func (m *MockBookService) Update(book *domain.Book) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", book)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBookServiceMockRecorder) Update(book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookService)(nil).Update), book)
}

// UpdateCopies mocks base method.
func (m *MockBookService) UpdateCopies(id int64, totalCopies, availableCopies int32) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCopies", id, totalCopies, availableCopies)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCopies indicates an expected call of UpdateCopies.
func (mr *MockBookServiceMockRecorder) UpdateCopies(id, totalCopies, availableCopies any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCopies", reflect.TypeOf((*MockBookService)(nil).UpdateCopies), id, totalCopies, availableCopies)
}
