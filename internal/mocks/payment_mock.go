// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/payment.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/payment.go -destination=internal/mocks/payment_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	domain "github.com/SimpleBookRental/backend/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
	isgomock struct{}
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentRepository) Create(payment *domain.Payment) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", payment)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPaymentRepositoryMockRecorder) Create(payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentRepository)(nil).Create), payment)
}

// Delete mocks base method.
func (m *MockPaymentRepository) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPaymentRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPaymentRepository)(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockPaymentRepository) GetByID(id int64) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPaymentRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPaymentRepository)(nil).GetByID), id)
}

// GetRevenueReport mocks base method.
func (m *MockPaymentRepository) GetRevenueReport(startDate, endDate time.Time) ([]*domain.RevenueReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevenueReport", startDate, endDate)
	ret0, _ := ret[0].([]*domain.RevenueReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevenueReport indicates an expected call of GetRevenueReport.
func (mr *MockPaymentRepositoryMockRecorder) GetRevenueReport(startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevenueReport", reflect.TypeOf((*MockPaymentRepository)(nil).GetRevenueReport), startDate, endDate)
}

// List mocks base method.
func (m *MockPaymentRepository) List(limit, offset int32) ([]*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, offset)
	ret0, _ := ret[0].([]*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPaymentRepositoryMockRecorder) List(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPaymentRepository)(nil).List), limit, offset)
}

// ListByRental mocks base method.
func (m *MockPaymentRepository) ListByRental(rentalID int64) ([]*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRental", rentalID)
	ret0, _ := ret[0].([]*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRental indicates an expected call of ListByRental.
func (mr *MockPaymentRepositoryMockRecorder) ListByRental(rentalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRental", reflect.TypeOf((*MockPaymentRepository)(nil).ListByRental), rentalID)
}

// ListByUser mocks base method.
func (m *MockPaymentRepository) ListByUser(userID int64, limit, offset int32) ([]*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", userID, limit, offset)
	ret0, _ := ret[0].([]*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockPaymentRepositoryMockRecorder) ListByUser(userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockPaymentRepository)(nil).ListByUser), userID, limit, offset)
}

// UpdateStatus mocks base method.
func (m *MockPaymentRepository) UpdateStatus(id int64, status domain.PaymentStatus) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", id, status)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockPaymentRepositoryMockRecorder) UpdateStatus(id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockPaymentRepository)(nil).UpdateStatus), id, status)
}

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
	isgomock struct{}
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentService) Create(payment *domain.Payment) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", payment)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPaymentServiceMockRecorder) Create(payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentService)(nil).Create), payment)
}

// GetByID mocks base method.
func (m *MockPaymentService) GetByID(id int64) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPaymentServiceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPaymentService)(nil).GetByID), id)
}

// GetRevenueReport mocks base method.
func (m *MockPaymentService) GetRevenueReport(startDate, endDate time.Time) ([]*domain.RevenueReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevenueReport", startDate, endDate)
	ret0, _ := ret[0].([]*domain.RevenueReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevenueReport indicates an expected call of GetRevenueReport.
func (mr *MockPaymentServiceMockRecorder) GetRevenueReport(startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevenueReport", reflect.TypeOf((*MockPaymentService)(nil).GetRevenueReport), startDate, endDate)
}

// List mocks base method.
func (m *MockPaymentService) List(limit, offset int32) ([]*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, offset)
	ret0, _ := ret[0].([]*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPaymentServiceMockRecorder) List(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPaymentService)(nil).List), limit, offset)
}

// ListByRental mocks base method.
func (m *MockPaymentService) ListByRental(rentalID int64) ([]*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByRental", rentalID)
	ret0, _ := ret[0].([]*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByRental indicates an expected call of ListByRental.
func (mr *MockPaymentServiceMockRecorder) ListByRental(rentalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByRental", reflect.TypeOf((*MockPaymentService)(nil).ListByRental), rentalID)
}

// ListByUser mocks base method.
func (m *MockPaymentService) ListByUser(userID int64, limit, offset int32) ([]*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", userID, limit, offset)
	ret0, _ := ret[0].([]*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockPaymentServiceMockRecorder) ListByUser(userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockPaymentService)(nil).ListByUser), userID, limit, offset)
}

// ProcessPayment mocks base method.
func (m *MockPaymentService) ProcessPayment(payment *domain.Payment) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", payment)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockPaymentServiceMockRecorder) ProcessPayment(payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockPaymentService)(nil).ProcessPayment), payment)
}

// RefundPayment mocks base method.
func (m *MockPaymentService) RefundPayment(id int64) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundPayment", id)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefundPayment indicates an expected call of RefundPayment.
func (mr *MockPaymentServiceMockRecorder) RefundPayment(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundPayment", reflect.TypeOf((*MockPaymentService)(nil).RefundPayment), id)
}
