// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/rental.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/rental.go -destination=internal/mocks/rental_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	domain "github.com/SimpleBookRental/backend/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRentalRepository is a mock of RentalRepository interface.
type MockRentalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRentalRepositoryMockRecorder
	isgomock struct{}
}

// MockRentalRepositoryMockRecorder is the mock recorder for MockRentalRepository.
type MockRentalRepositoryMockRecorder struct {
	mock *MockRentalRepository
}

// NewMockRentalRepository creates a new mock instance.
func NewMockRentalRepository(ctrl *gomock.Controller) *MockRentalRepository {
	mock := &MockRentalRepository{ctrl: ctrl}
	mock.recorder = &MockRentalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRentalRepository) EXPECT() *MockRentalRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRentalRepository) Create(rental *domain.Rental) (*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", rental)
	ret0, _ := ret[0].(*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRentalRepositoryMockRecorder) Create(rental any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRentalRepository)(nil).Create), rental)
}

// Delete mocks base method.
func (m *MockRentalRepository) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRentalRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRentalRepository)(nil).Delete), id)
}

// Extend mocks base method.
func (m *MockRentalRepository) Extend(id int64, newDueDate time.Time) (*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extend", id, newDueDate)
	ret0, _ := ret[0].(*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extend indicates an expected call of Extend.
func (mr *MockRentalRepositoryMockRecorder) Extend(id, newDueDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extend", reflect.TypeOf((*MockRentalRepository)(nil).Extend), id, newDueDate)
}

// GetByID mocks base method.
func (m *MockRentalRepository) GetByID(id int64) (*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRentalRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRentalRepository)(nil).GetByID), id)
}

// List mocks base method.
func (m *MockRentalRepository) List(limit, offset int32) ([]*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, offset)
	ret0, _ := ret[0].([]*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRentalRepositoryMockRecorder) List(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRentalRepository)(nil).List), limit, offset)
}

// ListActive mocks base method.
func (m *MockRentalRepository) ListActive(limit, offset int32) ([]*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActive", limit, offset)
	ret0, _ := ret[0].([]*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActive indicates an expected call of ListActive.
func (mr *MockRentalRepositoryMockRecorder) ListActive(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActive", reflect.TypeOf((*MockRentalRepository)(nil).ListActive), limit, offset)
}

// ListByBook mocks base method.
func (m *MockRentalRepository) ListByBook(bookID int64, limit, offset int32) ([]*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByBook", bookID, limit, offset)
	ret0, _ := ret[0].([]*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByBook indicates an expected call of ListByBook.
func (mr *MockRentalRepositoryMockRecorder) ListByBook(bookID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByBook", reflect.TypeOf((*MockRentalRepository)(nil).ListByBook), bookID, limit, offset)
}

// ListByUser mocks base method.
func (m *MockRentalRepository) ListByUser(userID int64, limit, offset int32) ([]*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", userID, limit, offset)
	ret0, _ := ret[0].([]*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockRentalRepositoryMockRecorder) ListByUser(userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockRentalRepository)(nil).ListByUser), userID, limit, offset)
}

// ListOverdue mocks base method.
func (m *MockRentalRepository) ListOverdue(limit, offset int32) ([]*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOverdue", limit, offset)
	ret0, _ := ret[0].([]*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOverdue indicates an expected call of ListOverdue.
func (mr *MockRentalRepositoryMockRecorder) ListOverdue(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOverdue", reflect.TypeOf((*MockRentalRepository)(nil).ListOverdue), limit, offset)
}

// Return mocks base method.
func (m *MockRentalRepository) Return(id int64) (*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Return", id)
	ret0, _ := ret[0].(*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Return indicates an expected call of Return.
func (mr *MockRentalRepositoryMockRecorder) Return(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Return", reflect.TypeOf((*MockRentalRepository)(nil).Return), id)
}

// UpdateStatus mocks base method.
func (m *MockRentalRepository) UpdateStatus(id int64, status domain.RentalStatus) (*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", id, status)
	ret0, _ := ret[0].(*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockRentalRepositoryMockRecorder) UpdateStatus(id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockRentalRepository)(nil).UpdateStatus), id, status)
}

// MockRentalService is a mock of RentalService interface.
type MockRentalService struct {
	ctrl     *gomock.Controller
	recorder *MockRentalServiceMockRecorder
	isgomock struct{}
}

// MockRentalServiceMockRecorder is the mock recorder for MockRentalService.
type MockRentalServiceMockRecorder struct {
	mock *MockRentalService
}

// NewMockRentalService creates a new mock instance.
func NewMockRentalService(ctrl *gomock.Controller) *MockRentalService {
	mock := &MockRentalService{ctrl: ctrl}
	mock.recorder = &MockRentalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRentalService) EXPECT() *MockRentalServiceMockRecorder {
	return m.recorder
}

// CalculateLateFee mocks base method.
func (m *MockRentalService) CalculateLateFee(rental *domain.Rental) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateLateFee", rental)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateLateFee indicates an expected call of CalculateLateFee.
func (mr *MockRentalServiceMockRecorder) CalculateLateFee(rental any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateLateFee", reflect.TypeOf((*MockRentalService)(nil).CalculateLateFee), rental)
}

// Create mocks base method.
func (m *MockRentalService) Create(rental *domain.Rental) (*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", rental)
	ret0, _ := ret[0].(*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRentalServiceMockRecorder) Create(rental any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRentalService)(nil).Create), rental)
}

// Extend mocks base method.
func (m *MockRentalService) Extend(id int64, days int) (*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extend", id, days)
	ret0, _ := ret[0].(*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extend indicates an expected call of Extend.
func (mr *MockRentalServiceMockRecorder) Extend(id, days any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extend", reflect.TypeOf((*MockRentalService)(nil).Extend), id, days)
}

// GetByID mocks base method.
func (m *MockRentalService) GetByID(id int64) (*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRentalServiceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRentalService)(nil).GetByID), id)
}

// IsOverdue mocks base method.
func (m *MockRentalService) IsOverdue(rental *domain.Rental) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOverdue", rental)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOverdue indicates an expected call of IsOverdue.
func (mr *MockRentalServiceMockRecorder) IsOverdue(rental any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOverdue", reflect.TypeOf((*MockRentalService)(nil).IsOverdue), rental)
}

// List mocks base method.
func (m *MockRentalService) List(limit, offset int32) ([]*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, offset)
	ret0, _ := ret[0].([]*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRentalServiceMockRecorder) List(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRentalService)(nil).List), limit, offset)
}

// ListActive mocks base method.
func (m *MockRentalService) ListActive(limit, offset int32) ([]*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActive", limit, offset)
	ret0, _ := ret[0].([]*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActive indicates an expected call of ListActive.
func (mr *MockRentalServiceMockRecorder) ListActive(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActive", reflect.TypeOf((*MockRentalService)(nil).ListActive), limit, offset)
}

// ListByBook mocks base method.
func (m *MockRentalService) ListByBook(bookID int64, limit, offset int32) ([]*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByBook", bookID, limit, offset)
	ret0, _ := ret[0].([]*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByBook indicates an expected call of ListByBook.
func (mr *MockRentalServiceMockRecorder) ListByBook(bookID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByBook", reflect.TypeOf((*MockRentalService)(nil).ListByBook), bookID, limit, offset)
}

// ListByUser mocks base method.
func (m *MockRentalService) ListByUser(userID int64, limit, offset int32) ([]*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", userID, limit, offset)
	ret0, _ := ret[0].([]*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockRentalServiceMockRecorder) ListByUser(userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockRentalService)(nil).ListByUser), userID, limit, offset)
}

// ListOverdue mocks base method.
func (m *MockRentalService) ListOverdue(limit, offset int32) ([]*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOverdue", limit, offset)
	ret0, _ := ret[0].([]*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOverdue indicates an expected call of ListOverdue.
func (mr *MockRentalServiceMockRecorder) ListOverdue(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOverdue", reflect.TypeOf((*MockRentalService)(nil).ListOverdue), limit, offset)
}

// Return mocks base method.
func (m *MockRentalService) Return(id int64) (*domain.Rental, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Return", id)
	ret0, _ := ret[0].(*domain.Rental)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Return indicates an expected call of Return.
func (mr *MockRentalServiceMockRecorder) Return(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Return", reflect.TypeOf((*MockRentalService)(nil).Return), id)
}
