basePath: /api/v1
definitions:
  api.BookCopiesRequest:
    properties:
      available_copies:
        minimum: 0
        type: integer
      total_copies:
        minimum: 1
        type: integer
    required:
    - available_copies
    - total_copies
    type: object
  api.BookRequest:
    properties:
      author:
        type: string
      category_id:
        type: integer
      description:
        type: string
      isbn:
        type: string
      published_year:
        type: integer
      publisher:
        type: string
      title:
        type: string
      total_copies:
        minimum: 1
        type: integer
    required:
    - author
    - isbn
    - title
    - total_copies
    type: object
  api.CategoryRequest:
    properties:
      description:
        example: Books of fiction genre including novels, short stories, etc.
        type: string
      name:
        example: Fiction
        type: string
    required:
    - name
    type: object
  api.ChangePasswordRequest:
    properties:
      current_password:
        example: oldpassword
        type: string
      new_password:
        example: newpassword123
        minLength: 6
        type: string
    required:
    - current_password
    - new_password
    type: object
  api.ExtendRentalRequest:
    properties:
      days:
        example: 7
        minimum: 1
        type: integer
    required:
    - days
    type: object
  api.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: johndoe
        type: string
    required:
    - password
    - username
    type: object
  api.PaginatedResponse:
    properties:
      data: {}
      error:
        type: string
      limit:
        example: 10
        type: integer
      message:
        example: Data retrieved successfully
        type: string
      offset:
        example: 0
        type: integer
      success:
        example: true
        type: boolean
      total:
        example: 100
        type: integer
    type: object
  api.PaymentRequest:
    properties:
      amount:
        example: 15.5
        type: number
      payment_method:
        example: credit_card
        type: string
      rental_id:
        example: 1
        type: integer
    required:
    - amount
    - payment_method
    type: object
  api.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  api.RegisterRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      username:
        example: johndoe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  api.RentalRequest:
    properties:
      book_id:
        example: 1
        type: integer
      due_date:
        example: "2025-05-15T10:00:00Z"
        type: string
      rental_date:
        example: "2025-05-01T10:00:00Z"
        type: string
    required:
    - book_id
    type: object
  api.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  api.TokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  api.UpdateUserRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      role:
        allOf:
        - $ref: '#/definitions/domain.UserRole'
        example: member
      username:
        example: johndoe
        type: string
    type: object
  domain.Book:
    properties:
      author:
        type: string
      available_copies:
        type: integer
      category_id:
        type: integer
      category_name:
        description: For join queries
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      isbn:
        type: string
      published_year:
        type: integer
      publisher:
        type: string
      title:
        type: string
      total_copies:
        type: integer
      updated_at:
        type: string
    type: object
  domain.Category:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  domain.ErrorResponse:
    properties:
      error:
        example: Resource not found
        type: string
      success:
        example: false
        type: boolean
    type: object
  domain.Payment:
    properties:
      amount:
        type: number
      book_title:
        description: For join queries
        type: string
      created_at:
        type: string
      id:
        type: integer
      payment_date:
        type: string
      payment_method:
        type: string
      rental_id:
        type: integer
      status:
        $ref: '#/definitions/domain.PaymentStatus'
      transaction_id:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      user_username:
        description: For join queries
        type: string
    type: object
  domain.PaymentStatus:
    enum:
    - pending
    - completed
    - failed
    - refunded
    type: string
    x-enum-varnames:
    - PaymentStatusPending
    - PaymentStatusCompleted
    - PaymentStatusFailed
    - PaymentStatusRefunded
  domain.Rental:
    properties:
      book_author:
        description: For join queries
        type: string
      book_id:
        type: integer
      book_title:
        description: For join queries
        type: string
      created_at:
        type: string
      due_date:
        type: string
      id:
        type: integer
      rental_date:
        type: string
      return_date:
        type: string
      status:
        $ref: '#/definitions/domain.RentalStatus'
      updated_at:
        type: string
      user_id:
        type: integer
      user_username:
        description: For join queries
        type: string
    type: object
  domain.RentalStatus:
    enum:
    - active
    - returned
    - overdue
    type: string
    x-enum-varnames:
    - RentalStatusActive
    - RentalStatusReturned
    - RentalStatusOverdue
  domain.RevenueReport:
    properties:
      month:
        type: string
      payment_count:
        type: integer
      total_revenue:
        type: number
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      role:
        $ref: '#/definitions/domain.UserRole'
      updated_at:
        type: string
      username:
        type: string
    type: object
  domain.UserRole:
    enum:
    - admin
    - librarian
    - member
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleLibrarian
    - RoleMember
host: localhost:8080
info:
  contact:
    email: support@simplebookrental.com
    name: API Support
  description: API for the Book Rental System - a virtual library management system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Book Rental System API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return access & refresh tokens
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/api.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the current user's token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new access and refresh tokens using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/api.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Refresh token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with member role
      parameters:
      - description: User registration information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /books:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all books
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Book'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: List all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book in the catalog
      parameters:
      - description: Book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/api.BookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book from the catalog
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Retrieve a single book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update an existing book's details
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated book object
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/api.BookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a book
      tags:
      - books
  /books/{id}/copies:
    patch:
      consumes:
      - application/json
      description: Update the number of total and available copies of a book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated copies information
        in: body
        name: copies
        required: true
        schema:
          $ref: '#/definitions/api.BookCopiesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Update book copies
      tags:
      - books
  /books/search:
    get:
      consumes:
      - application/json
      description: Search books with various filters
      parameters:
      - description: Title
        in: query
        name: title
        type: string
      - description: Author
        in: query
        name: author
        type: string
      - description: ISBN
        in: query
        name: isbn
        type: string
      - description: Published Year
        in: query
        name: published_year
        type: integer
      - description: Category ID
        in: query
        name: category_id
        type: integer
      - description: Available
        in: query
        name: available
        type: boolean
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Book'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Search books
      tags:
      - books
  /categories:
    get:
      consumes:
      - application/json
      description: Get a paginated list of categories
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Category'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new book category
      parameters:
      - description: Category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/api.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category from the system
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Retrieve a single category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Get a category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update an existing category's details
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/api.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a category
      tags:
      - categories
  /categories/{id}/books:
    get:
      consumes:
      - application/json
      description: Get a paginated list of books filtered by category ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Book'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: List books by category
      tags:
      - books
  /categories/all:
    get:
      consumes:
      - application/json
      description: Get a list of all categories without pagination
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Category'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: List all categories
      tags:
      - categories
  /payments:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all payments. Only admins can access this
        endpoint.
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Payment'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: List all payments
      tags:
      - payments
    post:
      consumes:
      - application/json
      description: Create a new payment for the authenticated user
      parameters:
      - description: Payment information
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/api.PaymentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Payment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a payment
      tags:
      - payments
  /payments/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a single payment by its ID. Users can only view their
        own payments unless they are admins/librarians.
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Payment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a payment by ID
      tags:
      - payments
  /payments/{id}/refund:
    put:
      consumes:
      - application/json
      description: Refund a processed payment. Only admins and librarians can refund
        payments.
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Payment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Refund a payment
      tags:
      - payments
  /payments/process:
    post:
      consumes:
      - application/json
      description: Process a payment transaction
      parameters:
      - description: Payment information
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/api.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Payment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Process a payment
      tags:
      - payments
  /payments/user/{userId}:
    get:
      consumes:
      - application/json
      description: Get a paginated list of payments for a specific user. Users can
        only view their own payments unless they are admins/librarians.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Payment'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: List user payments
      tags:
      - payments
  /rentals:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all rentals. Only admins and librarians
        can access this endpoint.
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Rental'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: List all rentals
      tags:
      - rentals
    post:
      consumes:
      - application/json
      description: Create a new book rental for the authenticated user
      parameters:
      - description: Rental information
        in: body
        name: rental
        required: true
        schema:
          $ref: '#/definitions/api.RentalRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Rental'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a rental
      tags:
      - rentals
  /rentals/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a single rental by its ID. Users can only view their own
        rentals unless they are admins/librarians.
      parameters:
      - description: Rental ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Rental'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a rental by ID
      tags:
      - rentals
  /rentals/{id}/extend:
    put:
      consumes:
      - application/json
      description: Extend a rental's due date by a specified number of days
      parameters:
      - description: Rental ID
        in: path
        name: id
        required: true
        type: integer
      - description: Extension information
        in: body
        name: extend
        required: true
        schema:
          $ref: '#/definitions/api.ExtendRentalRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Rental'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Extend a rental
      tags:
      - rentals
  /rentals/{id}/return:
    put:
      consumes:
      - application/json
      description: Return a rented book, calculates any late fees if applicable
      parameters:
      - description: Rental ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Return a rental
      tags:
      - rentals
  /rentals/user/{userId}:
    get:
      consumes:
      - application/json
      description: Get a paginated list of rentals for a specific user. Users can
        only view their own rentals unless they are admins/librarians.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Rental'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: List user rentals
      tags:
      - rentals
  /reports/books/popular:
    get:
      consumes:
      - application/json
      description: Retrieve a list of popular books based on rental frequency. Only
        accessible by admins and librarians.
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Book'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Get popular books
      tags:
      - reports
  /reports/overdue:
    get:
      consumes:
      - application/json
      description: Retrieve a list of books that are currently overdue. Only accessible
        by admins and librarians.
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Rental'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Get overdue books
      tags:
      - reports
  /reports/revenue:
    get:
      consumes:
      - application/json
      description: Retrieve a revenue report for a specific date range. Only accessible
        by admins.
      parameters:
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.RevenueReport'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Get revenue report
      tags:
      - reports
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all users. Only admins can access this
        endpoint.
      parameters:
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.User'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: List all users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user from the system. Only admins can delete users.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a single user by their ID. Users can only view their own
        profile unless they are admins.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user's profile information. Users can only update their
        own profile unless they are admins. Only admins can update user roles.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a user
      tags:
      - users
  /users/{id}/change-password:
    post:
      consumes:
      - application/json
      description: Change a user's password. Users can only change their own password.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Password change information
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/api.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      security:
      - Bearer: []
      summary: Change user password
      tags:
      - users
securityDefinitions:
  Bearer:
    description: 'JWT token for authentication. Use format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
